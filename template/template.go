package template

import (
	"path/filepath"
	"strings"

	"github.com/rah-0/margo/conf"
	"github.com/rah-0/margo/db"
	"github.com/rah-0/margo/util"
)

func CreateGoFile(rawTableName string, tfs []conf.TableField) error {
	p := filepath.Join(conf.Args.OutputPath, db.NormalizeString(conf.Args.DBName), db.NormalizeString(rawTableName), "entity.go")
	c := GetFileContent(rawTableName, tfs)
	return util.WriteGoFile(p, c)
}

func GetFileContent(rawTableName string, tfs []conf.TableField) string {
	t := "package " + db.NormalizeString(rawTableName) + "\n\n"
	t += GetCommentWarning()
	t += GetImports()
	t += GetConsts(rawTableName, tfs)
	t += GetVars(tfs)
	t += GetStruct(tfs)
	t += GetGeneralFunctions(rawTableName, tfs)
	t += GetDBFunctions(rawTableName, tfs)

	return t
}

func GetCommentWarning() string {
	return `// ---------------------------------------------------------------
// The code in this file is autogenerated, do not modify manually!
// ---------------------------------------------------------------

`
}

func GetImports() string {
	imports := "import (\n"
	imports += `"context"` + "\n"
	imports += `"database/sql"` + "\n"
	imports += `"strings"` + "\n"
	imports += ")\n\n"
	return imports
}

func GetConsts(rawTableName string, tfs []conf.TableField) string {
	t := "const (\n"
	t += `FQTN = "` + "`" + conf.Args.DBName + "`.`" + rawTableName + "`" + `"` + "\n"
	for _, tf := range tfs {
		t += "Field" + db.NormalizeString(tf.Name) + " = " + `"` + tf.Name + `"` + "\n"
	}
	t += ")\n\n"
	return t
}

func GetVars(tfs []conf.TableField) string {
	var fieldList []string
	for _, tf := range tfs {
		fieldList = append(fieldList, "Field"+db.NormalizeString(tf.Name))
	}

	t := "var (\n"
	t += "Fields = []string{" + strings.Join(fieldList, ",") + "}\n"
	t += "db *sql.DB\n"
	t += ")\n\n"
	return t
}

func GetStruct(tfs []conf.TableField) string {
	t := "type Entity struct {\n"
	for _, tf := range tfs {
		t += db.NormalizeString(tf.Name) + " string\n"
	}
	t += "}\n\n"
	return t
}

func GetGeneralFunctions(rawTableName string, tfs []conf.TableField) string {
	t := "func SetDB(x *sql.DB) {\n"
	t += "if x != nil {\n"
	t += "db = x\n"
	t += "}\n}\n\n"

	t += "func (x *Entity) GetFieldValues(fieldList []string) []any {\n"
	t += "values := make([]any, 0, len(fieldList))\n\n"
	t += "for _, field := range fieldList {\n"
	t += "switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "case Field" + tfn + ":\n"
		t += "values = append(values, x." + tfn + ")\n"
	}
	t += "}\n"
	t += "}\n\n"
	t += "return values"
	t += "}\n\n"

	t += "func GetFieldPlaceholders(fieldList []string) []string {\n"
	t += "placeholders := make([]string, 0, len(fieldList))\n\n"
	t += "for _, field := range fieldList {\n"
	t += "switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "case Field" + tfn + ":\n"
		t += "placeholders = append(placeholders, \"?\")\n"
	}
	t += "}\n"
	t += "}\n\n"
	t += "return placeholders\n"
	t += "}\n\n"

	t += "func GetFieldPlaceholdersWithName(fieldList []string) []string {\n"
	t += "placeholders := make([]string, 0, len(fieldList))\n\n"
	t += "for _, field := range fieldList {\n"
	t += "switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "case Field" + tfn + ":\n"
		t += "placeholders = append(placeholders, \"`\" + Field" + tfn + " + \"` = ?\")\n"
	}
	t += "}\n"
	t += "}\n\n"
	t += "return placeholders\n"
	t += "}\n\n"

	t += "func GetBacktickedFields (fieldList []string) []string {\n"
	t += "fields := make([]string, 0, len(fieldList))\n\n"
	t += "for _, field := range fieldList {\n"
	t += "switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "case Field" + tfn + ":\n"
		t += "fields = append(fields, \"`\" + Field" + tfn + " + \"`\")\n"
	}
	t += "}\n"
	t += "}\n\n"
	t += "return fields\n"
	t += "}\n\n"

	t += "func scanRow(rows *sql.Rows) (Entity, error) {\n"
	t += "var x Entity\n"
	for _, tf := range tfs {
		t += "var ptr" + db.NormalizeString(tf.Name) + " *string\n"
	}
	t += "err := rows.Scan(\n"
	for _, tf := range tfs {
		t += "&ptr" + db.NormalizeString(tf.Name) + ",\n"
	}
	t += ")\n"
	t += "if err != nil {\nreturn x, err}\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "if ptr" + tfn + " != nil {\n"
		t += "x." + tfn + " = *ptr" + tfn + "\n"
		t += "} else {\n"
		t += "x." + tfn + " = \"\"\n"
		t += "}\n"
	}
	t += "return x, nil\n"
	t += "}\n\n"

	t += "func queryEntities(query string, args ...any) ([]Entity, error) {\n"
	t += "rows, err := db.Query(query, args...)\n"
	t += "if err != nil {\nreturn nil, err}\n"
	t += "defer rows.Close()\n"
	t += "var results []Entity\n"
	t += "for rows.Next() {\n"
	t += "x, err := scanRow(rows)\n"
	t += "if err != nil {\nreturn results, err}\n"
	t += "results = append(results, x)\n"
	t += "}\nreturn results, nil\n"
	t += "}\n\n"

	t += "func queryEntitiesContext(ctx context.Context, query string, args ...any) ([]Entity, error) {\n"
	t += "rows, err := db.QueryContext(ctx, query, args...)\n"
	t += "if err != nil {\nreturn nil, err}\n"
	t += "defer rows.Close()\n"
	t += "var results []Entity\n"
	t += "for rows.Next() {\n"
	t += "x, err := scanRow(rows)\n"
	t += "if err != nil {\nreturn results, err}\n"
	t += "results = append(results, x)\n"
	t += "}\nreturn results, nil\n"
	t += "}\n\n"

	t += ""

	return t
}

func GetDBFunctions(rawTableName string, tfs []conf.TableField) string {
	t := ""

	t += "func DBTruncate() (sql.Result, error) {\n"
	t += "query := \"TRUNCATE TABLE \" + FQTN\n"
	t += "return db.Exec(query)\n"
	t += "}\n\n"

	t += "func DBTruncateContext(ctx context.Context) (sql.Result, error) {\n"
	t += "query := \"TRUNCATE TABLE \" + FQTN\n"
	t += "return db.ExecContext(ctx, query)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBInsert(fieldsToInsert []string) (sql.Result, error) {\n"
	t += "query := \"INSERT INTO \" + FQTN + \" (\" + strings.Join(fieldsToInsert, \", \") + \") VALUES (\" + strings.Join(GetFieldPlaceholders(fieldsToInsert), \", \") + \")\"\n"
	t += "return db.Exec(query, x.GetFieldValues(fieldsToInsert)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBInsertContext(ctx context.Context, fieldsToInsert []string) (sql.Result, error) {\n"
	t += "query := \"INSERT INTO \" + FQTN + \" (\" + strings.Join(fieldsToInsert, \", \") + \") VALUES (\" + strings.Join(GetFieldPlaceholders(fieldsToInsert), \", \") + \")\"\n"
	t += "return db.ExecContext(ctx, query, x.GetFieldValues(fieldsToInsert)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBDeleteWhereAll(fieldsToMatch []string) (sql.Result, error) {\n"
	t += "query := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(fieldsToMatch, \" = ? AND \") + \" = ?\"\n"
	t += "return db.Exec(query, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBDeleteWhereAllContext(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "query := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(fieldsToMatch, \" = ? AND \") + \" = ?\"\n"
	t += "return db.ExecContext(ctx, query, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBDeleteWhereAny(fieldsToMatch []string) (sql.Result, error) {\n"
	t += "query := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(fieldsToMatch, \" = ? OR \") + \" = ?\"\n"
	t += "return db.Exec(query, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBDeleteWhereAnyContext(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "query := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(fieldsToMatch, \" = ? OR \") + \" = ?\"\n"
	t += "return db.ExecContext(ctx, query, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBUpdateWhereAll(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "query := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(fieldsToMatch, \" = ? AND \") + \" = ?\"\n"
	t += "values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)\n"
	t += "return db.Exec(query, values...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBUpdateWhereAllContext(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "query := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(fieldsToMatch, \" = ? AND \") + \" = ?\"\n"
	t += "values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)\n"
	t += "return db.ExecContext(ctx, query, values...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBUpdateWhereAny(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "query := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(fieldsToMatch, \" = ? OR \") + \" = ?\"\n"
	t += "values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)\n"
	t += "return db.Exec(query, values...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBUpdateWhereAnyContext(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "query := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(fieldsToMatch, \" = ? OR \") + \" = ?\"\n"
	t += "values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)\n"
	t += "return db.ExecContext(ctx, query, values...)\n"
	t += "}\n\n"

	t += "func DBSelectAll() ([]Entity, error) {\n"
	t += "    query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN\n"
	t += "    return queryEntities(query)\n"
	t += "}\n\n"

	t += "func DBSelectAllContext(ctx context.Context) ([]Entity, error) {\n"
	t += "    query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN\n"
	t += "    return queryEntitiesContext(ctx, query)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSelectAllWhereAll(fieldsToMatch []string) ([]Entity, error) {\n"
	t += "    query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "        \" WHERE \" + strings.Join(fieldsToMatch, \" = ? AND \") + \" = ?\"\n"
	t += "    return queryEntities(query, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSelectAllWhereAllContext(ctx context.Context, fieldsToMatch []string) ([]Entity, error) {\n"
	t += "    query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "        \" WHERE \" + strings.Join(fieldsToMatch, \" = ? AND \") + \" = ?\"\n"
	t += "    return queryEntitiesContext(ctx, query, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSelectAllWhereAny(fieldsToMatch []string) ([]Entity, error) {\n"
	t += "    query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "        \" WHERE \" + strings.Join(fieldsToMatch, \" = ? OR \") + \" = ?\"\n"
	t += "    return queryEntities(query, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSelectAllWhereAnyContext(ctx context.Context, fieldsToMatch []string) ([]Entity, error) {\n"
	t += "    query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "        \" WHERE \" + strings.Join(fieldsToMatch, \" = ? OR \") + \" = ?\"\n"
	t += "    return queryEntitiesContext(ctx, query, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBExists(fields []string) (bool, error) {\n"
	t += "    query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") +\n"
	t += "        \" FROM \" + FQTN + \" WHERE \" + strings.Join(fields, \" = ? AND \") + \" = ? LIMIT 1\"\n"
	t += "    results, err := queryEntities(query, x.GetFieldValues(fields)...)\n"
	t += "    if err != nil {\n"
	t += "        return false, err\n"
	t += "    }\n"
	t += "    if len(results) == 0 {\n"
	t += "        return false, nil\n"
	t += "    }\n"
	t += "    *x = results[0]\n"
	t += "    return true, nil\n"
	t += "}\n\n"

	t += "func (x *Entity) DBExistsContext(ctx context.Context, fields []string) (bool, error) {\n"
	t += "    query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") +\n"
	t += "        \" FROM \" + FQTN + \" WHERE \" + strings.Join(fields, \" = ? AND \") + \" = ? LIMIT 1\"\n"
	t += "    results, err := queryEntitiesContext(ctx, query, x.GetFieldValues(fields)...)\n"
	t += "    if err != nil {\n"
	t += "        return false, err\n"
	t += "    }\n"
	t += "    if len(results) == 0 {\n"
	t += "        return false, nil\n"
	t += "    }\n"
	t += "    *x = results[0]\n"
	t += "    return true, nil\n"
	t += "}\n\n"

	t += "func DBCountAll() (int, error) {\n"
	t += "    query := \"SELECT COUNT(*) FROM \" + FQTN\n"
	t += "    var count int\n"
	t += "    err := db.QueryRow(query).Scan(&count)\n"
	t += "    return count, err\n"
	t += "}\n\n"

	t += "func DBCountAllContext(ctx context.Context) (int, error) {\n"
	t += "    query := \"SELECT COUNT(*) FROM \" + FQTN\n"
	t += "    var count int\n"
	t += "    err := db.QueryRowContext(ctx, query).Scan(&count)\n"
	t += "    return count, err\n"
	t += "}\n\n"

	t += "func (x *Entity) DBCountWhereAll(fields []string) (int, error) {\n"
	t += "    query := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(fields, \" = ? AND \") + \" = ?\"\n"
	t += "    var count int\n"
	t += "    err := db.QueryRow(query, x.GetFieldValues(fields)...).Scan(&count)\n"
	t += "    return count, err\n"
	t += "}\n\n"

	t += "func (x *Entity) DBCountWhereAllContext(ctx context.Context, fields []string) (int, error) {\n"
	t += "    query := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(fields, \" = ? AND \") + \" = ?\"\n"
	t += "    var count int\n"
	t += "    err := db.QueryRowContext(ctx, query, x.GetFieldValues(fields)...).Scan(&count)\n"
	t += "    return count, err\n"
	t += "}\n\n"

	t += "func (x *Entity) DBCountWhereAny(fields []string) (int, error) {\n"
	t += "    query := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(fields, \" = ? OR \") + \" = ?\"\n"
	t += "    var count int\n"
	t += "    err := db.QueryRow(query, x.GetFieldValues(fields)...).Scan(&count)\n"
	t += "    return count, err\n"
	t += "}\n\n"

	t += "func (x *Entity) DBCountWhereAnyContext(ctx context.Context, fields []string) (int, error) {\n"
	t += "    query := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(fields, \" = ? OR \") + \" = ?\"\n"
	t += "    var count int\n"
	t += "    err := db.QueryRowContext(ctx, query, x.GetFieldValues(fields)...).Scan(&count)\n"
	t += "    return count, err\n"
	t += "}\n\n"

	return t
}
