package template

import (
	"path/filepath"
	"sort"

	"github.com/rah-0/margo/conf"
	"github.com/rah-0/margo/db"
	"github.com/rah-0/margo/util"
)

func CreateGoFile(rawTableName string, tfs []conf.TableField) error {
	p := filepath.Join(conf.Args.OutputPath, db.NormalizeString(conf.Args.DBName), db.NormalizeString(rawTableName), "entity.go")
	c := GetFileContent(rawTableName, tfs)
	return util.WriteGoFile(p, c)
}

func GetFileContent(rawTableName string, tfs []conf.TableField) string {
	t := "package " + db.NormalizeString(rawTableName) + "\n\n"
	t += GetCommentWarning()
	t += GetImports(tfs)
	t += GetStruct(rawTableName, tfs)

	return t
}

func GetCommentWarning() string {
	return `// ---------------------------------------------------------------
// The code in this file is autogenerated, do not modify manually!
// ---------------------------------------------------------------

`
}

func GetImports(tfs []conf.TableField) string {
	importSet := map[string]struct{}{}

	for _, tf := range tfs {
		switch tf.GOType {
		case "time.Time":
			importSet[`"time"`] = struct{}{}
		case "uuid.UUID":
			importSet[`"github.com/google/uuid"`] = struct{}{}
		case "decimal.Decimal":
			importSet[`"github.com/shopspring/decimal"`] = struct{}{}
		}
	}

	if len(importSet) == 0 {
		return ""
	}

	imports := "import (\n"
	var keys []string
	for imp := range importSet {
		keys = append(keys, imp)
	}
	sort.Strings(keys)
	for _, imp := range keys {
		imports += imp + "\n"
	}
	imports += ")\n\n"
	return imports
}

func GetStruct(rawTableName string, tfs []conf.TableField) string {
	t := "type " + db.NormalizeString(rawTableName) + " struct {\n"
	for _, tf := range tfs {
		t += db.NormalizeString(tf.Name) + " " + tf.GOType + "\n"
	}
	t += "}\n\n"
	return t
}
