package template

import (
	"path/filepath"
	"strings"

	"github.com/rah-0/margo/conf"
	"github.com/rah-0/margo/db"
	"github.com/rah-0/margo/util"
)

func CreateGoFileEntity(rawTableName string, tfs []conf.TableField) error {
	p := filepath.Join(conf.Args.OutputPath, db.NormalizeString(conf.Args.DBName), db.NormalizeString(rawTableName), "entity.go")
	c := GetFileContentEntity(rawTableName, tfs)
	return util.WriteGoFile(p, c)
}

func GetFileContentEntity(rawTableName string, tfs []conf.TableField) string {
	t := "package " + db.NormalizeString(rawTableName) + "\n\n"
	t += GetCommentWarning()
	t += GetImports()
	t += GetConsts(rawTableName, tfs)
	t += GetVars(tfs)
	t += GetStruct(tfs)
	t += GetGeneralFunctions(tfs)
	t += GetDBFunctions()

	return t
}

func GetCommentWarning() string {
	return `// ---------------------------------------------------------------
// The code in this file is autogenerated, do not modify manually!
// ---------------------------------------------------------------

`
}

func GetImports() string {
	imports := "import (\n"
	imports += `"context"` + "\n"
	imports += `"database/sql"` + "\n"
	imports += `"strings"` + "\n"
	imports += `"sync"` + "\n"
	imports += ")\n\n"
	return imports
}

func GetConsts(rawTableName string, tfs []conf.TableField) string {
	t := "const (\n"
	t += `FQTN = "` + "`" + conf.Args.DBName + "`.`" + rawTableName + "`" + `"` + "\n"
	for _, tf := range tfs {
		t += "Field" + db.NormalizeString(tf.Name) + " = " + `"` + tf.Name + `"` + "\n"
	}
	t += ")\n\n"
	return t
}

func GetVars(tfs []conf.TableField) string {
	var fieldList []string
	for _, tf := range tfs {
		fieldList = append(fieldList, "Field"+db.NormalizeString(tf.Name))
	}

	t := "var (\n"
	t += "Fields = []string{" + strings.Join(fieldList, ",") + "}\n"
	t += "db *sql.DB\n"
	t += "stmtMu sync.RWMutex\n"
	t += "stmtCache = make(map[string]*sql.Stmt)\n"
	t += ")\n\n"
	return t
}

func GetStruct(tfs []conf.TableField) string {
	t := "type Entity struct {\n"
	for _, tf := range tfs {
		t += db.NormalizeString(tf.Name) + " string\n"
	}
	t += "}\n\n"
	return t
}

func GetGeneralFunctions(tfs []conf.TableField) string {
	t := "func SetDB(x *sql.DB) {\n"
	t += "	db = x\n"
	t += "}\n\n"

	t += "func (x *Entity) GetFieldValues(fieldList []string) []any {\n"
	t += "	values := make([]any, 0, len(fieldList))\n\n"
	t += "	for _, field := range fieldList {\n"
	t += "		switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "		case Field" + tfn + ":\n"
		t += "			values = append(values, x." + tfn + ")\n"
	}
	t += "		}\n"
	t += "	}\n\n"
	t += "	return values\n"
	t += "}\n\n"

	t += "func GetFieldPlaceholders(fieldList []string) []string {\n"
	t += "	placeholders := make([]string, 0, len(fieldList))\n\n"
	t += "	for _, field := range fieldList {\n"
	t += "		switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "		case Field" + tfn + ":\n"
		t += "			placeholders = append(placeholders, \"?\")\n"
	}
	t += "		}\n"
	t += "	}\n\n"
	t += "	return placeholders\n"
	t += "}\n\n"

	t += "func GetBacktickedField(field string) string {\n"
	t += "	switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "	case Field" + tfn + ":\n"
		t += "		return FQTN + \".`\" + Field" + tfn + " + \"`\"\n"
	}
	t += "	}\n"
	t += "	return \"\"\n"
	t += "}\n\n"

	t += "func GetBacktickedFields(fieldList []string) []string {\n"
	t += "	fields := make([]string, 0, len(fieldList))\n"
	t += "	for _, field := range fieldList {\n"
	t += "		fields = append(fields, GetBacktickedField(field))\n"
	t += "	}\n"
	t += "	return fields\n"
	t += "}\n\n"

	t += "func GetFieldPlaceholder(field string) string {\n"
	t += "	switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "	case Field" + tfn + ":\n"
		t += "		return FQTN + \".`\" + Field" + tfn + " + \"` = ?\"\n"
	}
	t += "	}\n"
	t += "	return \"\"\n"
	t += "}\n\n"

	t += "func GetFieldPlaceholdersWithName(fieldList []string) []string {\n"
	t += "	placeholders := make([]string, 0, len(fieldList))\n"
	t += "	for _, field := range fieldList {\n"
	t += "		placeholders = append(placeholders, GetFieldPlaceholder(field))\n"
	t += "	}\n"
	t += "	return placeholders\n"
	t += "}\n\n"

	t += "func getPreparedStmt(query string) (*sql.Stmt, error) {\n"
	t += "	stmtMu.RLock()\n"
	t += "	if stmt, ok := stmtCache[query]; ok {\n"
	t += "		stmtMu.RUnlock()\n"
	t += "		return stmt, nil\n"
	t += "	}\n"
	t += "	stmtMu.RUnlock()\n\n"
	t += "	stmtMu.Lock()\n"
	t += "	defer stmtMu.Unlock()\n"
	t += "	if stmt, ok := stmtCache[query]; ok {\n"
	t += "		return stmt, nil\n"
	t += "	}\n"
	t += "	stmt, err := db.Prepare(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	stmtCache[query] = stmt\n"
	t += "	return stmt, nil\n"
	t += "}\n\n"

	t += "func scanRow(fields []string, rows *sql.Rows) (*Entity, error) {\n"
	t += "	x := &Entity{}\n"
	t += "	var (\n"
	for _, tf := range tfs {
		t += "		ptr" + db.NormalizeString(tf.Name) + " *string\n"
	}
	t += "		scanTargets []any\n"
	t += "	)\n\n"
	t += "	for _, field := range fields {\n"
	t += "		switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "		case Field" + tfn + ":\n"
		t += "			scanTargets = append(scanTargets, &ptr" + tfn + ")\n"
	}
	t += "		}\n"
	t += "	}\n\n"
	t += "	err := rows.Scan(scanTargets...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "	if ptr" + tfn + " != nil {\n"
		t += "		x." + tfn + " = *ptr" + tfn + "\n"
		t += "	} else {\n"
		t += "		x." + tfn + " = \"\"\n"
		t += "	}\n"
	}
	t += "	return x, nil\n"
	t += "}\n\n"

	t += "func readRows(fields []string, rows *sql.Rows) ([]*Entity, error) {\n"
	t += "	defer rows.Close()\n"
	t += "	var results []*Entity\n"
	t += "	for rows.Next() {\n"
	t += "		x, err := scanRow(fields, rows)\n"
	t += "		if err != nil {\n"
	t += "			return results, err\n"
	t += "		}\n"
	t += "		results = append(results, x)\n"
	t += "	}\n"
	t += "	return results, nil\n"
	t += "}\n\n"

	return t
}

func GetDBFunctions() string {
	t := ""

	t += "func DBTruncate() (sql.Result, error) {\n"
	t += "	query := \"TRUNCATE TABLE \" + FQTN\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	return stmt.Exec()\n"
	t += "}\n\n"

	t += "func DBTruncateContext(ctx context.Context) (sql.Result, error) {\n"
	t += "	query := \"TRUNCATE TABLE \" + FQTN\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	return stmt.ExecContext(ctx)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBInsert(fieldsToInsert []string) (sql.Result, error) {\n"
	t += "	query := \"INSERT INTO \" + FQTN + \" (\" + strings.Join(GetBacktickedFields(fieldsToInsert), \", \") + \") VALUES (\" + strings.Join(GetFieldPlaceholders(fieldsToInsert), \", \") + \")\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	return stmt.Exec(x.GetFieldValues(fieldsToInsert)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBInsertContext(ctx context.Context, fieldsToInsert []string) (sql.Result, error) {\n"
	t += "	query := \"INSERT INTO \" + FQTN + \" (\" + strings.Join(GetBacktickedFields(fieldsToInsert), \", \") + \") VALUES (\" + strings.Join(GetFieldPlaceholders(fieldsToInsert), \", \") + \")\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	return stmt.ExecContext(ctx, x.GetFieldValues(fieldsToInsert)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBDeleteWhereAll(fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	query := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	return stmt.Exec(x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBDeleteWhereAllContext(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	query := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	return stmt.ExecContext(ctx, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBDeleteWhereAny(fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	query := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	return stmt.Exec(x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBDeleteWhereAnyContext(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	query := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	return stmt.ExecContext(ctx, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBUpdateWhereAll(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	query := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)\n"
	t += "	return stmt.Exec(values...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBUpdateWhereAllContext(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	query := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)\n"
	t += "	return stmt.ExecContext(ctx, values...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBUpdateWhereAny(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	query := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)\n"
	t += "	return stmt.Exec(values...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBUpdateWhereAnyContext(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	query := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetFieldPlaceholdersWithName(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	values := append(x.GetFieldValues(fieldsToUpdate), x.GetFieldValues(fieldsToMatch)...)\n"
	t += "	return stmt.ExecContext(ctx, values...)\n"
	t += "}\n\n"

	t += "func DBSelectAll() ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.Query()\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func DBSelectAllContext(ctx context.Context) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.QueryContext(ctx)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func DBSelectAllWithFields(fields []string) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(fields), \", \") + \" FROM \" + FQTN\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.Query()\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(fields, rows)\n"
	t += "}\n\n"

	t += "func DBSelectAllWithFieldsContext(ctx context.Context, fields []string) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(fields), \", \") + \" FROM \" + FQTN\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.QueryContext(ctx)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(fields, rows)\n"
	t += "}\n\n"

	t += "func DBSubquerySelectAll(subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN + \" \" + subquery\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.Query(args...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func DBSubquerySelectAllContext(ctx context.Context, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN + \" \" + subquery\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.QueryContext(ctx, args...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSelectAllWhereAll(fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "		\" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.Query(x.GetFieldValues(fieldsToMatch)...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSelectAllWhereAllContext(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "		\" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.QueryContext(ctx, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSelectAllWhereAny(fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "		\" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.Query(x.GetFieldValues(fieldsToMatch)...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSelectAllWhereAnyContext(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "		\" WHERE \" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.QueryContext(ctx, x.GetFieldValues(fieldsToMatch)...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBExists(fields []string) (bool, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") +\n"
	t += "		\" FROM \" + FQTN + \" WHERE \" + strings.Join(GetBacktickedFields(fields), \" = ? AND \") + \" = ? LIMIT 1\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return false, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.Query(x.GetFieldValues(fields)...)\n"
	t += "	if err != nil {\n"
	t += "		return false, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	results, err := readRows(Fields, rows)\n"
	t += "	if err != nil {\n"
	t += "		return false, err\n"
	t += "	}\n"
	t += "	if len(results) == 0 {\n"
	t += "		return false, nil\n"
	t += "	}\n"
	t += "	*x = *results[0]\n"
	t += "	return true, nil\n"
	t += "}\n\n"

	t += "func (x *Entity) DBExistsContext(ctx context.Context, fields []string) (bool, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") +\n"
	t += "		\" FROM \" + FQTN + \" WHERE \" + strings.Join(GetBacktickedFields(fields), \" = ? AND \") + \" = ? LIMIT 1\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return false, err\n"
	t += "	}\n"
	t += "	rows, err := stmt.QueryContext(ctx, x.GetFieldValues(fields)...)\n"
	t += "	if err != nil {\n"
	t += "		return false, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	results, err := readRows(Fields, rows)\n"
	t += "	if err != nil {\n"
	t += "		return false, err\n"
	t += "	}\n"
	t += "	if len(results) == 0 {\n"
	t += "		return false, nil\n"
	t += "	}\n"
	t += "	*x = *results[0]\n"
	t += "	return true, nil\n"
	t += "}\n\n"

	t += "func (x *Entity) DBCountWhereAll(fields []string) (int, error) {\n"
	t += "	query := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetBacktickedFields(fields), \" = ? AND \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return 0, err\n"
	t += "	}\n"
	t += "	var count int\n"
	t += "	err = stmt.QueryRow(x.GetFieldValues(fields)...).Scan(&count)\n"
	t += "	return count, err\n"
	t += "}\n\n"

	t += "func (x *Entity) DBCountWhereAllContext(ctx context.Context, fields []string) (int, error) {\n"
	t += "	query := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetBacktickedFields(fields), \" = ? AND \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return 0, err\n"
	t += "	}\n"
	t += "	var count int\n"
	t += "	err = stmt.QueryRowContext(ctx, x.GetFieldValues(fields)...).Scan(&count)\n"
	t += "	return count, err\n"
	t += "}\n\n"

	t += "func (x *Entity) DBCountWhereAny(fields []string) (int, error) {\n"
	t += "	query := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetBacktickedFields(fields), \" = ? OR \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return 0, err\n"
	t += "	}\n"
	t += "	var count int\n"
	t += "	err = stmt.QueryRow(x.GetFieldValues(fields)...).Scan(&count)\n"
	t += "	return count, err\n"
	t += "}\n\n"

	t += "func (x *Entity) DBCountWhereAnyContext(ctx context.Context, fields []string) (int, error) {\n"
	t += "	query := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetBacktickedFields(fields), \" = ? OR \") + \" = ?\"\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return 0, err\n"
	t += "	}\n"
	t += "	var count int\n"
	t += "	err = stmt.QueryRowContext(ctx, x.GetFieldValues(fields)...).Scan(&count)\n"
	t += "	return count, err\n"
	t += "}\n\n"

	t += "func (x *Entity) DBFindOrCreate(fields []string) error {\n"
	t += "	exists, err := x.DBExists(fields)\n"
	t += "	if err != nil {\n"
	t += "		return err\n"
	t += "	}\n"
	t += "	if exists {\n"
	t += "		return nil\n"
	t += "	}\n"
	t += "	_, err = x.DBInsert(fields)\n"
	t += "	if err != nil {\n"
	t += "		return err\n"
	t += "	}\n"
	t += "	_, err = x.DBExists(fields)\n"
	t += "	if err != nil {\n"
	t += "		return err\n"
	t += "	}\n"
	t += "	return nil\n"
	t += "}\n\n"

	t += "func (x *Entity) DBFindOrCreateContext(ctx context.Context, fields []string) error {\n"
	t += "	exists, err := x.DBExistsContext(ctx, fields)\n"
	t += "	if err != nil {\n"
	t += "		return err\n"
	t += "	}\n"
	t += "	if exists {\n"
	t += "		return nil\n"
	t += "	}\n"
	t += "	_, err = x.DBInsertContext(ctx, fields)\n"
	t += "	if err != nil {\n"
	t += "		return err\n"
	t += "	}\n"
	t += "	_, err = x.DBExistsContext(ctx, fields)\n"
	t += "	if err != nil {\n"
	t += "		return err\n"
	t += "	}\n"
	t += "	return nil\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSubquerySelectAllWhereAll(fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "		\" WHERE (\" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? AND \") + \" = ?) \" + subquery\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	allArgs := append(x.GetFieldValues(fieldsToMatch), args...)\n"
	t += "	rows, err := stmt.Query(allArgs...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSubquerySelectAllWhereAllContext(ctx context.Context, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "		\" WHERE (\" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? AND \") + \" = ?) \" + subquery\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	allArgs := append(x.GetFieldValues(fieldsToMatch), args...)\n"
	t += "	rows, err := stmt.QueryContext(ctx, allArgs...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSubquerySelectAllWhereAny(fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "		\" WHERE (\" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? OR \") + \" = ?) \" + subquery\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	allArgs := append(x.GetFieldValues(fieldsToMatch), args...)\n"
	t += "	rows, err := stmt.Query(allArgs...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSubquerySelectAllWhereAnyContext(ctx context.Context, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	query := \"SELECT \" + strings.Join(GetBacktickedFields(Fields), \", \") + \" FROM \" + FQTN +\n"
	t += "		\" WHERE (\" + strings.Join(GetBacktickedFields(fieldsToMatch), \" = ? OR \") + \" = ?) \" + subquery\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	allArgs := append(x.GetFieldValues(fieldsToMatch), args...)\n"
	t += "	rows, err := stmt.QueryContext(ctx, allArgs...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	defer rows.Close()\n"
	t += "	return readRows(Fields, rows)\n"
	t += "}\n\n"

	return t
}
