package template

import (
	"path/filepath"
	"strings"

	"github.com/rah-0/nabu"

	"github.com/rah-0/margo/conf"
	"github.com/rah-0/margo/db"
	"github.com/rah-0/margo/util"
)

func CreateGoFileEntity(rawTableName string, tfs []conf.TableField, nqs []conf.NamedQuery) error {
	p := filepath.Join(conf.Args.OutputPath, db.NormalizeString(conf.Args.DBName), db.NormalizeString(rawTableName), "entity.go")
	c, err := GetFileContentEntity(rawTableName, tfs, nqs)
	if err != nil {
		return nabu.FromError(err).WithArgs(rawTableName).Log()
	}

	return util.WriteGoFile(p, c)
}

func GetFileContentEntity(rawTableName string, tfs []conf.TableField, nqs []conf.NamedQuery) (string, error) {
	t := "package " + db.NormalizeString(rawTableName) + "\n\n"
	t += GetCommentWarning()
	t += GetImports(nqs)
	t += GetConsts(rawTableName, tfs)
	t += GetVars(tfs, nqs)
	t += GetStruct(tfs)
	t += GetGeneralFunctions(tfs, nqs)
	t += GetDBFunctions()
	t += GetNamedQueryFunctions(nqs)

	return t, nil
}

func GetCommentWarning() string {
	return `// ---------------------------------------------------------------
// The code in this file is autogenerated, do not modify manually!
// ---------------------------------------------------------------

`
}

func GetImports(nqs []conf.NamedQuery) string {
	imports := "import (\n"
	imports += `"context"` + "\n"
	imports += `"database/sql"` + "\n"
	if len(nqs) > 0 {
		imports += `"encoding/base64"` + "\n"
	}
	imports += `"strings"` + "\n"
	imports += `"sync"` + "\n"
	imports += ")\n\n"
	return imports
}

func GetConsts(rawTableName string, tfs []conf.TableField) string {
	t := "const (\n"
	t += `FQTN = "` + "`" + conf.Args.DBName + "`.`" + rawTableName + "`" + `"` + "\n"
	for _, tf := range tfs {
		t += "Field" + db.NormalizeString(tf.Name) + " = " + `"` + tf.Name + `"` + "\n"
	}
	t += ")\n\n"
	return t
}

func GetVars(tfs []conf.TableField, nqs []conf.NamedQuery) string {
	var fieldList []string
	for _, tf := range tfs {
		fieldList = append(fieldList, "Field"+db.NormalizeString(tf.Name))
	}

	t := "var (\n"
	t += "Fields = []string{" + strings.Join(fieldList, ",") + "}\n"
	t += "db *sql.DB\n"
	t += "stmtMu sync.RWMutex\n"
	t += "stmtCache = make(map[string]*sql.Stmt)\n"
	if len(nqs) > 0 {
		t += "queries = map[string]*NamedQuery{\n"
		for _, nq := range nqs {
			t += `"` + nq.Name + `": {QueryEncoded: "` + nq.QueryEncoded + `"},` + "\n"
		}
		t += "}\n"
	}
	t += ")\n\n"

	if len(nqs) > 0 {
		t += "type NamedQuery struct {\n"
		t += "\tName string\n"
		t += "\tQuery string\n"
		t += "\tQueryEncoded string\n"
		t += "}\n\n"
	}

	return t
}

func GetStruct(tfs []conf.TableField) string {
	t := "type Entity struct {\n"
	for _, tf := range tfs {
		t += db.NormalizeString(tf.Name) + " string `json:\",omitempty,omitzero\"`\n"
	}
	t += "}\n\n"
	return t
}

func GetGeneralFunctions(tfs []conf.TableField, nqs []conf.NamedQuery) string {
	t := "func SetDB(x *sql.DB) error {\n"
	t += "	db = x\n"
	if len(nqs) > 0 {
		t += "    for _, q := range queries {\n"
		t += "        b, err := base64.StdEncoding.DecodeString(q.QueryEncoded)\n"
		t += "        if err != nil {\n"
		t += "            return err\n"
		t += "        }\n"
		t += "        q.Query = string(b)\n"
		t += "    }\n"
	}
	t += "    return nil\n"
	t += "}\n\n"

	t += "func (x *Entity) GetFieldValue(field string) any {\n"
	t += "	switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "	case Field" + tfn + ":\n"
		t += "		return x." + tfn + "\n"
	}
	t += "	}\n"
	t += "	return nil\n"
	t += "}\n\n"

	t += "func (x *Entity) GetFieldsValues(fieldList []string) []any {\n"
	t += "	values := make([]any, 0, len(fieldList))\n"
	t += "	for _, field := range fieldList {\n"
	t += "		values = append(values, x.GetFieldValue(field))\n"
	t += "	}\n"
	t += "	return values\n"
	t += "}\n\n"

	t += "func GetValuePlaceholder(field string) string {\n"
	t += "	switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "	case Field" + tfn + ":\n"
		t += "		return \"?\"\n"
	}
	t += "	}\n"
	t += "	return \"\"\n"
	t += "}\n\n"

	t += "func GetValuesPlaceholders(fieldList []string) []string {\n"
	t += "	placeholders := make([]string, 0, len(fieldList))\n"
	t += "	for _, field := range fieldList {\n"
	t += "		placeholders = append(placeholders, GetValuePlaceholder(field))\n"
	t += "	}\n"
	t += "	return placeholders\n"
	t += "}\n\n"

	t += "func GetQualifiedField(field string) string {\n"
	t += "	switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "	case Field" + tfn + ":\n"
		t += "		return FQTN + \".`\" + Field" + tfn + " + \"`\"\n"
	}
	t += "	}\n"
	t += "	return \"\"\n"
	t += "}\n\n"

	t += "func GetQualifiedFields(fieldList []string) []string {\n"
	t += "	fields := make([]string, 0, len(fieldList))\n"
	t += "	for _, field := range fieldList {\n"
	t += "		fields = append(fields, GetQualifiedField(field))\n"
	t += "	}\n"
	t += "	return fields\n"
	t += "}\n\n"

	t += "func GetQualifiedPlaceholder(field string) string {\n"
	t += "	switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "	case Field" + tfn + ":\n"
		t += "		return FQTN + \".`\" + Field" + tfn + " + \"` = ?\"\n"
	}
	t += "	}\n"
	t += "	return \"\"\n"
	t += "}\n\n"

	t += "func GetQualifiedPlaceholders(fieldList []string) []string {\n"
	t += "	placeholders := make([]string, 0, len(fieldList))\n"
	t += "	for _, field := range fieldList {\n"
	t += "		placeholders = append(placeholders, GetQualifiedPlaceholder(field))\n"
	t += "	}\n"
	t += "	return placeholders\n"
	t += "}\n\n"

	t += "func getPreparedStmt(query string) (*sql.Stmt, error) {\n"
	t += "	stmtMu.RLock()\n"
	t += "	if stmt, ok := stmtCache[query]; ok {\n"
	t += "		stmtMu.RUnlock()\n"
	t += "		return stmt, nil\n"
	t += "	}\n"
	t += "	stmtMu.RUnlock()\n\n"
	t += "	stmtMu.Lock()\n"
	t += "	defer stmtMu.Unlock()\n"
	t += "	if stmt, ok := stmtCache[query]; ok {\n"
	t += "		return stmt, nil\n"
	t += "	}\n"
	t += "	stmt, err := db.Prepare(query)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n"
	t += "	stmtCache[query] = stmt\n"
	t += "	return stmt, nil\n"
	t += "}\n\n"

	t += "func scanRow(fields []string, rows *sql.Rows) (*Entity, error) {\n"
	t += "	x := &Entity{}\n"
	t += "	var (\n"
	for _, tf := range tfs {
		t += "		ptr" + db.NormalizeString(tf.Name) + " *string\n"
	}
	t += "		scanTargets []any\n"
	t += "	)\n\n"
	t += "	for _, field := range fields {\n"
	t += "		switch field {\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "		case Field" + tfn + ":\n"
		t += "			scanTargets = append(scanTargets, &ptr" + tfn + ")\n"
	}
	t += "		}\n"
	t += "	}\n\n"
	t += "	err := rows.Scan(scanTargets...)\n"
	t += "	if err != nil {\n"
	t += "		return nil, err\n"
	t += "	}\n\n"
	for _, tf := range tfs {
		tfn := db.NormalizeString(tf.Name)
		t += "	if ptr" + tfn + " != nil {\n"
		t += "		x." + tfn + " = *ptr" + tfn + "\n"
		t += "	} else {\n"
		t += "		x." + tfn + " = \"\"\n"
		t += "	}\n"
	}
	t += "	return x, nil\n"
	t += "}\n\n"

	t += "func readRows(fields []string, rows *sql.Rows) ([]*Entity, error) {\n"
	t += "    defer rows.Close()\n"
	t += "    var results []*Entity\n"
	t += "    for rows.Next() {\n"
	t += "        x, err := scanRow(fields, rows)\n"
	t += "        if err != nil { return results, err }\n"
	t += "        results = append(results, x)\n"
	t += "    }\n"
	t += "    if err := rows.Err(); err != nil { return results, err }\n"
	t += "    return results, nil\n"
	t += "}\n\n"

	t += "func bindStmtCtxTx(base *sql.Stmt, ctx context.Context, tx *sql.Tx) (*sql.Stmt, bool) {\n"
	t += "	if tx == nil {\n"
	t += "		return base, false\n"
	t += "	}\n"
	t += "	if ctx != nil {\n"
	t += "		return tx.StmtContext(ctx, base), true\n"
	t += "	}\n"
	t += "	return tx.Stmt(base), true\n"
	t += "}\n\n"

	t += "func execCore(ctx context.Context, tx *sql.Tx, query string, args ...any) (res sql.Result, err error) {\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil { return nil, err }\n"
	t += "	var c context.Context\n"
	t += "	if ctx != nil { c = ctx }\n"
	t += "	s, needClose := bindStmtCtxTx(stmt, c, tx)\n"
	t += "	if needClose { defer func(){ if cerr := s.Close(); err == nil && cerr != nil { err = cerr } }() }\n"
	t += "	if ctx != nil { return s.ExecContext(ctx, args...) }\n"
	t += "	return s.Exec(args...)\n"
	t += "}\n\n"

	t += "func queryCore(ctx context.Context, tx *sql.Tx, fields []string, query string, args ...any) (out []*Entity, err error) {\n"
	t += "    stmt, err := getPreparedStmt(query)\n"
	t += "    if err != nil { return nil, err }\n"
	t += "    var c context.Context\n"
	t += "    if ctx != nil { c = ctx }\n"
	t += "    s, needClose := bindStmtCtxTx(stmt, c, tx)\n"
	t += "    if needClose { defer func(){ if cerr := s.Close(); err == nil && cerr != nil { err = cerr } }() }\n"
	t += "    var rows *sql.Rows\n"
	t += "    if ctx != nil { rows, err = s.QueryContext(ctx, args...) } else { rows, err = s.Query(args...) }\n"
	t += "    if err != nil { return nil, err }\n"
	t += "    return readRows(fields, rows)\n"
	t += "}\n\n"

	t += "func scalarCore(ctx context.Context, tx *sql.Tx, query string, args ...any) (int, error) {\n"
	t += "	stmt, err := getPreparedStmt(query)\n"
	t += "	if err != nil { return 0, err }\n"
	t += "	var c context.Context\n"
	t += "	if ctx != nil { c = ctx }\n"
	t += "	s, needClose := bindStmtCtxTx(stmt, c, tx)\n"
	t += "	if needClose { defer s.Close() }\n"
	t += "	var v int\n"
	t += "	if ctx != nil { err = s.QueryRowContext(ctx, args...).Scan(&v) } else { err = s.QueryRow(args...).Scan(&v) }\n"
	t += "	return v, err\n"
	t += "}\n\n"

	return t
}

func GetDBFunctions() string {
	t := ""

	t += "func DBTruncate() (sql.Result, error) { return execCore(nil, nil, \"TRUNCATE TABLE \"+FQTN) }\n"
	t += "func DBTruncateCtx(ctx context.Context) (sql.Result, error) { return execCore(ctx, nil, \"TRUNCATE TABLE \"+FQTN) }\n"
	t += "func DBTruncateTx(tx *sql.Tx) (sql.Result, error) { return execCore(nil, tx, \"TRUNCATE TABLE \"+FQTN) }\n"
	t += "func DBTruncateCtxTx(ctx context.Context, tx *sql.Tx) (sql.Result, error) { return execCore(ctx, tx, \"TRUNCATE TABLE \"+FQTN) }\n\n"

	t += "func (x *Entity) DBInsert(fieldsToInsert []string) (sql.Result, error) {\n"
	t += "	q := \"INSERT INTO \" + FQTN + \" (\" + strings.Join(GetQualifiedFields(fieldsToInsert), \", \") + \") VALUES (\" + strings.Join(GetValuesPlaceholders(fieldsToInsert), \", \") + \")\"\n"
	t += "	return execCore(nil, nil, q, x.GetFieldsValues(fieldsToInsert)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBInsertCtx(ctx context.Context, fieldsToInsert []string) (sql.Result, error) {\n"
	t += "	q := \"INSERT INTO \" + FQTN + \" (\" + strings.Join(GetQualifiedFields(fieldsToInsert), \", \") + \") VALUES (\" + strings.Join(GetValuesPlaceholders(fieldsToInsert), \", \") + \")\"\n"
	t += "	return execCore(ctx, nil, q, x.GetFieldsValues(fieldsToInsert)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBInsertTx(tx *sql.Tx, fieldsToInsert []string) (sql.Result, error) {\n"
	t += "	q := \"INSERT INTO \" + FQTN + \" (\" + strings.Join(GetQualifiedFields(fieldsToInsert), \", \") + \") VALUES (\" + strings.Join(GetValuesPlaceholders(fieldsToInsert), \", \") + \")\"\n"
	t += "	return execCore(nil, tx, q, x.GetFieldsValues(fieldsToInsert)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBInsertCtxTx(ctx context.Context, tx *sql.Tx, fieldsToInsert []string) (sql.Result, error) {\n"
	t += "	q := \"INSERT INTO \" + FQTN + \" (\" + strings.Join(GetQualifiedFields(fieldsToInsert), \", \") + \") VALUES (\" + strings.Join(GetValuesPlaceholders(fieldsToInsert), \", \") + \")\"\n"
	t += "	return execCore(ctx, tx, q, x.GetFieldsValues(fieldsToInsert)...)\n"
	t += "}\n\n"

	// DELETE ... WHERE ... AND ...
	t += "func (x *Entity) DBDeleteWhereAll(fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	return execCore(nil, nil, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBDeleteWhereAllCtx(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	return execCore(ctx, nil, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBDeleteWhereAllTx(tx *sql.Tx, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	return execCore(nil, tx, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBDeleteWhereAllCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	return execCore(ctx, tx, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	// DELETE ... WHERE ... OR ...
	t += "func (x *Entity) DBDeleteWhereAny(fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	return execCore(nil, nil, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBDeleteWhereAnyCtx(ctx context.Context, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	return execCore(ctx, nil, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBDeleteWhereAnyTx(tx *sql.Tx, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	return execCore(nil, tx, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBDeleteWhereAnyCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"DELETE FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	return execCore(ctx, tx, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	// UPDATE ... SET ... WHERE ... AND ...
	t += "func (x *Entity) DBUpdateWhereAll(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "	return execCore(nil, nil, q, vals...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBUpdateWhereAllCtx(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "	return execCore(ctx, nil, q, vals...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBUpdateWhereAllTx(tx *sql.Tx, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "	return execCore(nil, tx, q, vals...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBUpdateWhereAllCtxTx(ctx context.Context, tx *sql.Tx, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "	return execCore(ctx, tx, q, vals...)\n"
	t += "}\n\n"

	// UPDATE ... WHERE ... OR ...
	t += "func (x *Entity) DBUpdateWhereAny(fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "	return execCore(nil, nil, q, vals...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBUpdateWhereAnyCtx(ctx context.Context, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "	return execCore(ctx, nil, q, vals...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBUpdateWhereAnyTx(tx *sql.Tx, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "	return execCore(nil, tx, q, vals...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBUpdateWhereAnyCtxTx(ctx context.Context, tx *sql.Tx, fieldsToUpdate, fieldsToMatch []string) (sql.Result, error) {\n"
	t += "	q := \"UPDATE \" + FQTN + \" SET \" + strings.Join(GetQualifiedPlaceholders(fieldsToUpdate), \", \") + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	vals := append(x.GetFieldsValues(fieldsToUpdate), x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "	return execCore(ctx, tx, q, vals...)\n"
	t += "}\n\n"

	// SELECT * (well: Fields)
	t += "func DBSelectAll() ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN\n"
	t += "	return queryCore(nil, nil, Fields, q)\n"
	t += "}\n\n"
	t += "func DBSelectAllCtx(ctx context.Context) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN\n"
	t += "	return queryCore(ctx, nil, Fields, q)\n"
	t += "}\n\n"
	t += "func DBSelectAllTx(tx *sql.Tx) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN\n"
	t += "	return queryCore(nil, tx, Fields, q)\n"
	t += "}\n\n"
	t += "func DBSelectAllCtxTx(ctx context.Context, tx *sql.Tx) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN\n"
	t += "	return queryCore(ctx, tx, Fields, q)\n"
	t += "}\n\n"

	// SELECT with custom field list
	t += "func DBSelectAllWithFields(fields []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(fields), \", \") + \" FROM \" + FQTN\n"
	t += "	return queryCore(nil, nil, fields, q)\n"
	t += "}\n\n"
	t += "func DBSelectAllWithFieldsCtx(ctx context.Context, fields []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(fields), \", \") + \" FROM \" + FQTN\n"
	t += "	return queryCore(ctx, nil, fields, q)\n"
	t += "}\n\n"
	t += "func DBSelectAllWithFieldsTx(tx *sql.Tx, fields []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(fields), \", \") + \" FROM \" + FQTN\n"
	t += "	return queryCore(nil, tx, fields, q)\n"
	t += "}\n\n"
	t += "func DBSelectAllWithFieldsCtxTx(ctx context.Context, tx *sql.Tx, fields []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(fields), \", \") + \" FROM \" + FQTN\n"
	t += "	return queryCore(ctx, tx, fields, q)\n"
	t += "}\n\n"

	// Plain subquery over Fields
	t += "func DBSubquerySelectAll(subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" \" + subquery\n"
	t += "	return queryCore(nil, nil, Fields, q, args...)\n"
	t += "}\n\n"
	t += "func DBSubquerySelectAllCtx(ctx context.Context, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" \" + subquery\n"
	t += "	return queryCore(ctx, nil, Fields, q, args...)\n"
	t += "}\n\n"
	t += "func DBSubquerySelectAllTx(tx *sql.Tx, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" \" + subquery\n"
	t += "	return queryCore(nil, tx, Fields, q, args...)\n"
	t += "}\n\n"
	t += "func DBSubquerySelectAllCtxTx(ctx context.Context, tx *sql.Tx, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" \" + subquery\n"
	t += "	return queryCore(ctx, tx, Fields, q, args...)\n"
	t += "}\n\n"

	// Subquery with custom fields
	t += "func DBSubquerySelectAllWithFields(fields []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(fields), \", \") + \" FROM \" + FQTN + \" \" + subquery\n"
	t += "	return queryCore(nil, nil, fields, q, args...)\n"
	t += "}\n\n"
	t += "func DBSubquerySelectAllWithFieldsCtx(ctx context.Context, fields []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(fields), \", \") + \" FROM \" + FQTN + \" \" + subquery\n"
	t += "	return queryCore(ctx, nil, fields, q, args...)\n"
	t += "}\n\n"
	t += "func DBSubquerySelectAllWithFieldsTx(tx *sql.Tx, fields []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(fields), \", \") + \" FROM \" + FQTN + \" \" + subquery\n"
	t += "	return queryCore(nil, tx, fields, q, args...)\n"
	t += "}\n\n"
	t += "func DBSubquerySelectAllWithFieldsCtxTx(ctx context.Context, tx *sql.Tx, fields []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(fields), \", \") + \" FROM \" + FQTN + \" \" + subquery\n"
	t += "	return queryCore(ctx, tx, fields, q, args...)\n"
	t += "}\n\n"

	// Subquery + WHERE AND/OR
	t += "func (x *Entity) DBSubquerySelectAllWhereAll(fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE (\" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?) \" + subquery\n"
	t += "	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)\n"
	t += "	return queryCore(nil, nil, Fields, q, allArgs...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSubquerySelectAllWhereAllCtx(ctx context.Context, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE (\" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?) \" + subquery\n"
	t += "	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)\n"
	t += "	return queryCore(ctx, nil, Fields, q, allArgs...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSubquerySelectAllWhereAllTx(tx *sql.Tx, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE (\" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?) \" + subquery\n"
	t += "	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)\n"
	t += "	return queryCore(nil, tx, Fields, q, allArgs...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSubquerySelectAllWhereAllCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE (\" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?) \" + subquery\n"
	t += "	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)\n"
	t += "	return queryCore(ctx, tx, Fields, q, allArgs...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBSubquerySelectAllWhereAny(fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE (\" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?) \" + subquery\n"
	t += "	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)\n"
	t += "	return queryCore(nil, nil, Fields, q, allArgs...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSubquerySelectAllWhereAnyCtx(ctx context.Context, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE (\" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?) \" + subquery\n"
	t += "	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)\n"
	t += "	return queryCore(ctx, nil, Fields, q, allArgs...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSubquerySelectAllWhereAnyTx(tx *sql.Tx, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE (\" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?) \" + subquery\n"
	t += "	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)\n"
	t += "	return queryCore(nil, tx, Fields, q, allArgs...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSubquerySelectAllWhereAnyCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string, subquery string, args ...any) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE (\" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?) \" + subquery\n"
	t += "	allArgs := append(x.GetFieldsValues(fieldsToMatch), args...)\n"
	t += "	return queryCore(ctx, tx, Fields, q, allArgs...)\n"
	t += "}\n\n"

	// AND
	t += "func (x *Entity) DBSelectAllWhereAll(fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	return queryCore(nil, nil, Fields, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSelectAllWhereAllCtx(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	return queryCore(ctx, nil, Fields, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSelectAllWhereAllTx(tx *sql.Tx, fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	return queryCore(nil, tx, Fields, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSelectAllWhereAllCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? AND \") + \" = ?\"\n"
	t += "	return queryCore(ctx, tx, Fields, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	// OR
	t += "func (x *Entity) DBSelectAllWhereAny(fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	return queryCore(nil, nil, Fields, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSelectAllWhereAnyCtx(ctx context.Context, fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	return queryCore(ctx, nil, Fields, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSelectAllWhereAnyTx(tx *sql.Tx, fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	return queryCore(nil, tx, Fields, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBSelectAllWhereAnyCtxTx(ctx context.Context, tx *sql.Tx, fieldsToMatch []string) ([]*Entity, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fieldsToMatch), \" = ? OR \") + \" = ?\"\n"
	t += "	return queryCore(ctx, tx, Fields, q, x.GetFieldsValues(fieldsToMatch)...)\n"
	t += "}\n\n"

	//Exists
	t += "func (x *Entity) DBExists(fields []string) (bool, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? AND \") + \" = ? LIMIT 1\"\n"
	t += "	res, err := queryCore(nil, nil, Fields, q, x.GetFieldsValues(fields)...)\n"
	t += "	if err != nil { return false, err }\n"
	t += "	if len(res) == 0 { return false, nil }\n"
	t += "	*x = *res[0]\n"
	t += "	return true, nil\n"
	t += "}\n\n"
	t += "func (x *Entity) DBExistsCtx(ctx context.Context, fields []string) (bool, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? AND \") + \" = ? LIMIT 1\"\n"
	t += "	res, err := queryCore(ctx, nil, Fields, q, x.GetFieldsValues(fields)...)\n"
	t += "	if err != nil { return false, err }\n"
	t += "	if len(res) == 0 { return false, nil }\n"
	t += "	*x = *res[0]\n"
	t += "	return true, nil\n"
	t += "}\n\n"
	t += "func (x *Entity) DBExistsTx(tx *sql.Tx, fields []string) (bool, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? AND \") + \" = ? LIMIT 1\"\n"
	t += "	res, err := queryCore(nil, tx, Fields, q, x.GetFieldsValues(fields)...)\n"
	t += "	if err != nil { return false, err }\n"
	t += "	if len(res) == 0 { return false, nil }\n"
	t += "	*x = *res[0]\n"
	t += "	return true, nil\n"
	t += "}\n\n"
	t += "func (x *Entity) DBExistsCtxTx(ctx context.Context, tx *sql.Tx, fields []string) (bool, error) {\n"
	t += "	q := \"SELECT \" + strings.Join(GetQualifiedFields(Fields), \", \") + \" FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? AND \") + \" = ? LIMIT 1\"\n"
	t += "	res, err := queryCore(ctx, tx, Fields, q, x.GetFieldsValues(fields)...)\n"
	t += "	if err != nil { return false, err }\n"
	t += "	if len(res) == 0 { return false, nil }\n"
	t += "	*x = *res[0]\n"
	t += "	return true, nil\n"
	t += "}\n\n"

	// AND
	t += "func (x *Entity) DBCountWhereAll(fields []string) (int, error) {\n"
	t += "	q := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? AND \") + \" = ?\"\n"
	t += "	return scalarCore(nil, nil, q, x.GetFieldsValues(fields)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBCountWhereAllCtx(ctx context.Context, fields []string) (int, error) {\n"
	t += "	q := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? AND \") + \" = ?\"\n"
	t += "	return scalarCore(ctx, nil, q, x.GetFieldsValues(fields)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBCountWhereAllTx(tx *sql.Tx, fields []string) (int, error) {\n"
	t += "	q := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? AND \") + \" = ?\"\n"
	t += "	return scalarCore(nil, tx, q, x.GetFieldsValues(fields)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBCountWhereAllCtxTx(ctx context.Context, tx *sql.Tx, fields []string) (int, error) {\n"
	t += "	q := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? AND \") + \" = ?\"\n"
	t += "	return scalarCore(ctx, tx, q, x.GetFieldsValues(fields)...)\n"
	t += "}\n\n"

	// OR
	t += "func (x *Entity) DBCountWhereAny(fields []string) (int, error) {\n"
	t += "	q := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? OR \") + \" = ?\"\n"
	t += "	return scalarCore(nil, nil, q, x.GetFieldsValues(fields)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBCountWhereAnyCtx(ctx context.Context, fields []string) (int, error) {\n"
	t += "	q := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? OR \") + \" = ?\"\n"
	t += "	return scalarCore(ctx, nil, q, x.GetFieldsValues(fields)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBCountWhereAnyTx(tx *sql.Tx, fields []string) (int, error) {\n"
	t += "	q := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? OR \") + \" = ?\"\n"
	t += "	return scalarCore(nil, tx, q, x.GetFieldsValues(fields)...)\n"
	t += "}\n\n"
	t += "func (x *Entity) DBCountWhereAnyCtxTx(ctx context.Context, tx *sql.Tx, fields []string) (int, error) {\n"
	t += "	q := \"SELECT COUNT(*) FROM \" + FQTN + \" WHERE \" + strings.Join(GetQualifiedFields(fields), \" = ? OR \") + \" = ?\"\n"
	t += "	return scalarCore(ctx, tx, q, x.GetFieldsValues(fields)...)\n"
	t += "}\n\n"

	t += "func (x *Entity) DBFindOrCreate(fields []string) error {\n"
	t += "    ok, err := x.DBExists(fields)\n"
	t += "    if err != nil { return err }\n"
	t += "    if ok { return nil }\n"
	t += "    if _, err = x.DBInsert(fields); err != nil { return err }\n"
	t += "    _, err = x.DBExists(fields)\n"
	t += "    return err\n"
	t += "}\n\n"
	t += "func (x *Entity) DBFindOrCreateCtx(ctx context.Context, fields []string) error {\n"
	t += "    ok, err := x.DBExistsCtx(ctx, fields)\n"
	t += "    if err != nil { return err }\n"
	t += "    if ok { return nil }\n"
	t += "    if _, err = x.DBInsertCtx(ctx, fields); err != nil { return err }\n"
	t += "    _, err = x.DBExistsCtx(ctx, fields)\n"
	t += "    return err\n"
	t += "}\n\n"
	t += "func (x *Entity) DBFindOrCreateTx(tx *sql.Tx, fields []string) error {\n"
	t += "    ok, err := x.DBExistsTx(tx, fields)\n"
	t += "    if err != nil { return err }\n"
	t += "    if ok { return nil }\n"
	t += "    if _, err = x.DBInsertTx(tx, fields); err != nil { return err }\n"
	t += "    _, err = x.DBExistsTx(tx, fields)\n"
	t += "    return err\n"
	t += "}\n\n"
	t += "func (x *Entity) DBFindOrCreateCtxTx(ctx context.Context, tx *sql.Tx, fields []string) error {\n"
	t += "    ok, err := x.DBExistsCtxTx(ctx, tx, fields)\n"
	t += "    if err != nil { return err }\n"
	t += "    if ok { return nil }\n"
	t += "    if _, err = x.DBInsertCtxTx(ctx, tx, fields); err != nil { return err }\n"
	t += "    _, err = x.DBExistsCtxTx(ctx, tx, fields)\n"
	t += "    return err\n"
	t += "}\n\n"

	return t
}

func GetNamedQueryFunctions(nqs []conf.NamedQuery) string {
	t := ""

	for _, nq := range nqs {
		mode := strings.ToLower(nq.Mode)
		if mode == "" {
			mode = "many"
		}
		hasParams := strings.Contains(nq.Query, "?")

		fieldsLit := "nil"
		if mode != "exec" {
			fs := make([]string, 0, len(nq.Returns))
			for _, r := range nq.Returns {
				fs = append(fs, "Field"+db.NormalizeString(r))
			}
			fieldsLit = "[]string{" + strings.Join(fs, ",") + "}"
		}

		switch mode {
		case "exec":
			// core via execCore
			t += "func Exec" + nq.Name + "("
			if hasParams {
				t += "args ...any"
			}
			t += ") (sql.Result, error) { q := queries[\"" + nq.Name + "\"]; return execCore(nil, nil, q.Query"
			if hasParams {
				t += ", args..."
			}
			t += ") }\n"

			t += "func Exec" + nq.Name + "Ctx(ctx context.Context"
			if hasParams {
				t += ", args ...any"
			}
			t += ") (sql.Result, error) { q := queries[\"" + nq.Name + "\"]; return execCore(ctx, nil, q.Query"
			if hasParams {
				t += ", args..."
			}
			t += ") }\n"

			t += "func Exec" + nq.Name + "Tx(tx *sql.Tx"
			if hasParams {
				t += ", args ...any"
			}
			t += ") (sql.Result, error) { q := queries[\"" + nq.Name + "\"]; return execCore(nil, tx, q.Query"
			if hasParams {
				t += ", args..."
			}
			t += ") }\n"

			t += "func Exec" + nq.Name + "CtxTx(ctx context.Context, tx *sql.Tx"
			if hasParams {
				t += ", args ...any"
			}
			t += ") (sql.Result, error) { q := queries[\"" + nq.Name + "\"]; return execCore(ctx, tx, q.Query"
			if hasParams {
				t += ", args..."
			}
			t += ") }\n\n"

		case "one":
			// core uses queryCore + first element or nil
			t += "func Query" + nq.Name + "("
			if hasParams {
				t += "args ...any"
			}
			t += ") (*Entity, error) { q := queries[\"" + nq.Name + "\"]; out, err := queryCore(nil, nil, " + fieldsLit + ", q.Query"
			if hasParams {
				t += ", args..."
			}
			t += "); if err != nil { return nil, err }; if len(out) == 0 { return nil, nil }; return out[0], nil }\n"

			t += "func Query" + nq.Name + "Ctx(ctx context.Context"
			if hasParams {
				t += ", args ...any"
			}
			t += ") (*Entity, error) { q := queries[\"" + nq.Name + "\"]; out, err := queryCore(ctx, nil, " + fieldsLit + ", q.Query"
			if hasParams {
				t += ", args..."
			}
			t += "); if err != nil { return nil, err }; if len(out) == 0 { return nil, nil }; return out[0], nil }\n"

			t += "func Query" + nq.Name + "Tx(tx *sql.Tx"
			if hasParams {
				t += ", args ...any"
			}
			t += ") (*Entity, error) { q := queries[\"" + nq.Name + "\"]; out, err := queryCore(nil, tx, " + fieldsLit + ", q.Query"
			if hasParams {
				t += ", args..."
			}
			t += "); if err != nil { return nil, err }; if len(out) == 0 { return nil, nil }; return out[0], nil }\n"

			t += "func Query" + nq.Name + "CtxTx(ctx context.Context, tx *sql.Tx"
			if hasParams {
				t += ", args ...any"
			}
			t += ") (*Entity, error) { q := queries[\"" + nq.Name + "\"]; out, err := queryCore(ctx, tx, " + fieldsLit + ", q.Query"
			if hasParams {
				t += ", args..."
			}
			t += "); if err != nil { return nil, err }; if len(out) == 0 { return nil, nil }; return out[0], nil }\n\n"

		default: // many
			t += "func Query" + nq.Name + "("
			if hasParams {
				t += "args ...any"
			}
			t += ") ([]*Entity, error) { q := queries[\"" + nq.Name + "\"]; return queryCore(nil, nil, " + fieldsLit + ", q.Query"
			if hasParams {
				t += ", args..."
			}
			t += ") }\n"

			t += "func Query" + nq.Name + "Ctx(ctx context.Context"
			if hasParams {
				t += ", args ...any"
			}
			t += ") ([]*Entity, error) { q := queries[\"" + nq.Name + "\"]; return queryCore(ctx, nil, " + fieldsLit + ", q.Query"
			if hasParams {
				t += ", args..."
			}
			t += ") }\n"

			t += "func Query" + nq.Name + "Tx(tx *sql.Tx"
			if hasParams {
				t += ", args ...any"
			}
			t += ") ([]*Entity, error) { q := queries[\"" + nq.Name + "\"]; return queryCore(nil, tx, " + fieldsLit + ", q.Query"
			if hasParams {
				t += ", args..."
			}
			t += ") }\n"

			t += "func Query" + nq.Name + "CtxTx(ctx context.Context, tx *sql.Tx"
			if hasParams {
				t += ", args ...any"
			}
			t += ") ([]*Entity, error) { q := queries[\"" + nq.Name + "\"]; return queryCore(ctx, tx, " + fieldsLit + ", q.Query"
			if hasParams {
				t += ", args..."
			}
			t += ") }\n\n"
		}
	}

	return t
}
