package template

import (
	"strings"
	"testing"

	"github.com/rah-0/margo/db"
)

func TestGetStruct(t *testing.T) {
	tfs, err := db.GetDbTableFields(conn, tableNames[0])
	if err != nil {
		t.Fatal(err)
	}

	template := GetStruct(tfs)

	if template != `type Entity struct {
Id int
TinySigned int
TinyUnsigned uint
SmallSigned int
SmallUnsigned uint
MediumSigned int
MediumUnsigned uint
IntSigned int
IntUnsigned uint
BigSigned int64
BigUnsigned uint64
FloatField float64
DoubleField float64
RealField float64
DecimalField decimal.Decimal
DecField decimal.Decimal
NumericField decimal.Decimal
FixedField decimal.Decimal
Bit1 bool
Bit8 uint64
Bit64 uint64
BoolField int
BooleanField int
CharField string
VarcharField string
TextField string
TinytextField string
MediumtextField string
LongtextField string
EnumField string
SetField string
BinaryField []byte
VarbinaryField []byte
BlobField []byte
TinyblobField []byte
MediumblobField []byte
LongblobField []byte
DateField time.Time
TimeField time.Time
YearField time.Time
DatetimeField time.Time
TimestampField time.Time
UuidField uuid.UUID
}

` {
		t.Fatal("unexpected result:", template)
	}
}

func TestGetImports(t *testing.T) {
	tfs, err := db.GetDbTableFields(conn, tableNames[0])
	if err != nil {
		t.Fatal(err)
	}

	template := GetImports(tfs)

	expected := `import (
"context"
"database/sql"
"github.com/google/uuid"
"github.com/shopspring/decimal"
"strings"
"time"
)

`
	if template != expected {
		t.Fatal("unexpected result:", template)
	}
}

func TestGetFileContent(t *testing.T) {
	tfs, err := db.GetDbTableFields(conn, tableNames[0])
	if err != nil {
		t.Fatal(err)
	}

	template := GetFileContent(tableNames[0], tfs)

	expected := `package AllTypes

// ---------------------------------------------------------------
// The code in this file is autogenerated, do not modify manually!
// ---------------------------------------------------------------

import (
"database/sql"
"github.com/google/uuid"
"github.com/shopspring/decimal"
"time"
)

const (
FieldId = "id"
FieldTinySigned = "tiny_signed"
FieldTinyUnsigned = "tiny_unsigned"
FieldSmallSigned = "small_signed"
FieldSmallUnsigned = "small_unsigned"
FieldMediumSigned = "medium_signed"
FieldMediumUnsigned = "medium_unsigned"
FieldIntSigned = "int_signed"
FieldIntUnsigned = "int_unsigned"
FieldBigSigned = "big_signed"
FieldBigUnsigned = "big_unsigned"
FieldFloatField = "float_field"
FieldDoubleField = "double_field"
FieldRealField = "real_field"
FieldDecimalField = "decimal_field"
FieldDecField = "dec_field"
FieldNumericField = "numeric_field"
FieldFixedField = "fixed_field"
FieldBit1 = "bit1"
FieldBit8 = "bit8"
FieldBit64 = "bit64"
FieldBoolField = "bool_field"
FieldBooleanField = "boolean_field"
FieldCharField = "char_field"
FieldVarcharField = "varchar_field"
FieldTextField = "text_field"
FieldTinytextField = "tinytext_field"
FieldMediumtextField = "mediumtext_field"
FieldLongtextField = "longtext_field"
FieldEnumField = "enum_field"
FieldSetField = "set_field"
FieldBinaryField = "binary_field"
FieldVarbinaryField = "varbinary_field"
FieldBlobField = "blob_field"
FieldTinyblobField = "tinyblob_field"
FieldMediumblobField = "mediumblob_field"
FieldLongblobField = "longblob_field"
FieldDateField = "date_field"
FieldTimeField = "time_field"
FieldYearField = "year_field"
FieldDatetimeField = "datetime_field"
FieldTimestampField = "timestamp_field"
FieldUuidField = "uuid_field"
)

var (
Fields = []string{FieldId,FieldTinySigned,FieldTinyUnsigned,FieldSmallSigned,FieldSmallUnsigned,FieldMediumSigned,FieldMediumUnsigned,FieldIntSigned,FieldIntUnsigned,FieldBigSigned,FieldBigUnsigned,FieldFloatField,FieldDoubleField,FieldRealField,FieldDecimalField,FieldDecField,FieldNumericField,FieldFixedField,FieldBit1,FieldBit8,FieldBit64,FieldBoolField,FieldBooleanField,FieldCharField,FieldVarcharField,FieldTextField,FieldTinytextField,FieldMediumtextField,FieldLongtextField,FieldEnumField,FieldSetField,FieldBinaryField,FieldVarbinaryField,FieldBlobField,FieldTinyblobField,FieldMediumblobField,FieldLongblobField,FieldDateField,FieldTimeField,FieldYearField,FieldDatetimeField,FieldTimestampField,FieldUuidField}
db *sql.DB
)

type AllTypes struct {
Id int
TinySigned int
TinyUnsigned uint
SmallSigned int
SmallUnsigned uint
MediumSigned int
MediumUnsigned uint
IntSigned int
IntUnsigned uint
BigSigned int64
BigUnsigned uint64
FloatField float64
DoubleField float64
RealField float64
DecimalField decimal.Decimal
DecField decimal.Decimal
NumericField decimal.Decimal
FixedField decimal.Decimal
Bit1 bool
Bit8 uint64
Bit64 uint64
BoolField int
BooleanField int
CharField string
VarcharField string
TextField string
TinytextField string
MediumtextField string
LongtextField string
EnumField string
SetField string
BinaryField []byte
VarbinaryField []byte
BlobField []byte
TinyblobField []byte
MediumblobField []byte
LongblobField []byte
DateField time.Time
TimeField time.Time
YearField time.Time
DatetimeField time.Time
TimestampField time.Time
UuidField uuid.UUID
}

func SetDB(x *sql.DB) {
if x != nil {
db = x
}
}

`
	if template != expected {
		t.Fatal("unexpected result:", template)
	}
}

func TestCreateGoFile(t *testing.T) {
	for _, tn := range tableNames {
		tfs, err := db.GetDbTableFields(conn, tn)
		if err != nil {
			t.Fatal(err)
		}
		if err := CreateGoFile(tn, tfs); err != nil {
			t.Fatal(err)
		}
	}
}

func TestGetConsts(t *testing.T) {
	tfs, err := db.GetDbTableFields(conn, tableNames[0])
	if err != nil {
		t.Fatal(err)
	}

	template := GetConsts(tableNames[0], tfs)
	lines := strings.Split(template, "\n")
	if len(lines) > 1 {
		// Remove the second line
		lines = append(lines[:1], lines[2:]...)
	}
	template = strings.Join(lines, "\n")

	expected := `const (
FieldId = "id"
FieldTinySigned = "tiny_signed"
FieldTinyUnsigned = "tiny_unsigned"
FieldSmallSigned = "small_signed"
FieldSmallUnsigned = "small_unsigned"
FieldMediumSigned = "medium_signed"
FieldMediumUnsigned = "medium_unsigned"
FieldIntSigned = "int_signed"
FieldIntUnsigned = "int_unsigned"
FieldBigSigned = "big_signed"
FieldBigUnsigned = "big_unsigned"
FieldFloatField = "float_field"
FieldDoubleField = "double_field"
FieldRealField = "real_field"
FieldDecimalField = "decimal_field"
FieldDecField = "dec_field"
FieldNumericField = "numeric_field"
FieldFixedField = "fixed_field"
FieldBit1 = "bit1"
FieldBit8 = "bit8"
FieldBit64 = "bit64"
FieldBoolField = "bool_field"
FieldBooleanField = "boolean_field"
FieldCharField = "char_field"
FieldVarcharField = "varchar_field"
FieldTextField = "text_field"
FieldTinytextField = "tinytext_field"
FieldMediumtextField = "mediumtext_field"
FieldLongtextField = "longtext_field"
FieldEnumField = "enum_field"
FieldSetField = "set_field"
FieldBinaryField = "binary_field"
FieldVarbinaryField = "varbinary_field"
FieldBlobField = "blob_field"
FieldTinyblobField = "tinyblob_field"
FieldMediumblobField = "mediumblob_field"
FieldLongblobField = "longblob_field"
FieldDateField = "date_field"
FieldTimeField = "time_field"
FieldYearField = "year_field"
FieldDatetimeField = "datetime_field"
FieldTimestampField = "timestamp_field"
FieldUuidField = "uuid_field"
)

`
	if template != expected {
		t.Fatal("unexpected result:", template)
	}
}

func TestGetGeneralFunctions(t *testing.T) {
	tfs, err := db.GetDbTableFields(conn, tableNames[0])
	if err != nil {
		t.Fatal(err)
	}

	template := GetGeneralFunctions(tableNames[0], tfs)

	expected := `func SetDB(x *sql.DB) {
if x != nil {
db = x
}
}

func (x *Entity) GetFieldValues(fieldList []string) []any {
values := make([]any, 0, len(fieldList))

for _, field := range fieldList {
switch field {
case FieldId:
values = append(values, x.Id)
case FieldTinySigned:
values = append(values, x.TinySigned)
case FieldTinyUnsigned:
values = append(values, x.TinyUnsigned)
case FieldSmallSigned:
values = append(values, x.SmallSigned)
case FieldSmallUnsigned:
values = append(values, x.SmallUnsigned)
case FieldMediumSigned:
values = append(values, x.MediumSigned)
case FieldMediumUnsigned:
values = append(values, x.MediumUnsigned)
case FieldIntSigned:
values = append(values, x.IntSigned)
case FieldIntUnsigned:
values = append(values, x.IntUnsigned)
case FieldBigSigned:
values = append(values, x.BigSigned)
case FieldBigUnsigned:
values = append(values, x.BigUnsigned)
case FieldFloatField:
values = append(values, x.FloatField)
case FieldDoubleField:
values = append(values, x.DoubleField)
case FieldRealField:
values = append(values, x.RealField)
case FieldDecimalField:
values = append(values, x.DecimalField)
case FieldDecField:
values = append(values, x.DecField)
case FieldNumericField:
values = append(values, x.NumericField)
case FieldFixedField:
values = append(values, x.FixedField)
case FieldBit1:
values = append(values, x.Bit1)
case FieldBit8:
values = append(values, x.Bit8)
case FieldBit64:
values = append(values, x.Bit64)
case FieldBoolField:
values = append(values, x.BoolField)
case FieldBooleanField:
values = append(values, x.BooleanField)
case FieldCharField:
values = append(values, x.CharField)
case FieldVarcharField:
values = append(values, x.VarcharField)
case FieldTextField:
values = append(values, x.TextField)
case FieldTinytextField:
values = append(values, x.TinytextField)
case FieldMediumtextField:
values = append(values, x.MediumtextField)
case FieldLongtextField:
values = append(values, x.LongtextField)
case FieldEnumField:
values = append(values, x.EnumField)
case FieldSetField:
values = append(values, x.SetField)
case FieldBinaryField:
values = append(values, x.BinaryField)
case FieldVarbinaryField:
values = append(values, x.VarbinaryField)
case FieldBlobField:
values = append(values, x.BlobField)
case FieldTinyblobField:
values = append(values, x.TinyblobField)
case FieldMediumblobField:
values = append(values, x.MediumblobField)
case FieldLongblobField:
values = append(values, x.LongblobField)
case FieldDateField:
values = append(values, x.DateField)
case FieldTimeField:
values = append(values, x.TimeField)
case FieldYearField:
values = append(values, x.YearField)
case FieldDatetimeField:
values = append(values, x.DatetimeField)
case FieldTimestampField:
values = append(values, x.TimestampField)
case FieldUuidField:
values = append(values, x.UuidField)
}
}

return values}

func (x *Entity) GetFieldPlaceholders(fieldList []string) []string {
placeholders := make([]string, 0, len(fieldList))

for _, field := range fieldList {
switch field {
case FieldId:
placeholders = append(placeholders, "?")
case FieldTinySigned:
placeholders = append(placeholders, "?")
case FieldTinyUnsigned:
placeholders = append(placeholders, "?")
case FieldSmallSigned:
placeholders = append(placeholders, "?")
case FieldSmallUnsigned:
placeholders = append(placeholders, "?")
case FieldMediumSigned:
placeholders = append(placeholders, "?")
case FieldMediumUnsigned:
placeholders = append(placeholders, "?")
case FieldIntSigned:
placeholders = append(placeholders, "?")
case FieldIntUnsigned:
placeholders = append(placeholders, "?")
case FieldBigSigned:
placeholders = append(placeholders, "?")
case FieldBigUnsigned:
placeholders = append(placeholders, "?")
case FieldFloatField:
placeholders = append(placeholders, "?")
case FieldDoubleField:
placeholders = append(placeholders, "?")
case FieldRealField:
placeholders = append(placeholders, "?")
case FieldDecimalField:
placeholders = append(placeholders, "?")
case FieldDecField:
placeholders = append(placeholders, "?")
case FieldNumericField:
placeholders = append(placeholders, "?")
case FieldFixedField:
placeholders = append(placeholders, "?")
case FieldBit1:
placeholders = append(placeholders, "?")
case FieldBit8:
placeholders = append(placeholders, "?")
case FieldBit64:
placeholders = append(placeholders, "?")
case FieldBoolField:
placeholders = append(placeholders, "?")
case FieldBooleanField:
placeholders = append(placeholders, "?")
case FieldCharField:
placeholders = append(placeholders, "?")
case FieldVarcharField:
placeholders = append(placeholders, "?")
case FieldTextField:
placeholders = append(placeholders, "?")
case FieldTinytextField:
placeholders = append(placeholders, "?")
case FieldMediumtextField:
placeholders = append(placeholders, "?")
case FieldLongtextField:
placeholders = append(placeholders, "?")
case FieldEnumField:
placeholders = append(placeholders, "?")
case FieldSetField:
placeholders = append(placeholders, "?")
case FieldBinaryField:
placeholders = append(placeholders, "?")
case FieldVarbinaryField:
placeholders = append(placeholders, "?")
case FieldBlobField:
placeholders = append(placeholders, "?")
case FieldTinyblobField:
placeholders = append(placeholders, "?")
case FieldMediumblobField:
placeholders = append(placeholders, "?")
case FieldLongblobField:
placeholders = append(placeholders, "?")
case FieldDateField:
placeholders = append(placeholders, "?")
case FieldTimeField:
placeholders = append(placeholders, "?")
case FieldYearField:
placeholders = append(placeholders, "?")
case FieldDatetimeField:
placeholders = append(placeholders, "?")
case FieldTimestampField:
placeholders = append(placeholders, "?")
case FieldUuidField:
placeholders = append(placeholders, "?")
}
}

return placeholders
}

func (x *Entity) GetFieldPlaceholdersWithName(fieldList []string) []string {
placeholders := make([]string, 0, len(fieldList))

for _, field := range fieldList {
switch field {
case FieldId:
placeholders = append(placeholders, FieldId + " = ?")
case FieldTinySigned:
placeholders = append(placeholders, FieldTinySigned + " = ?")
case FieldTinyUnsigned:
placeholders = append(placeholders, FieldTinyUnsigned + " = ?")
case FieldSmallSigned:
placeholders = append(placeholders, FieldSmallSigned + " = ?")
case FieldSmallUnsigned:
placeholders = append(placeholders, FieldSmallUnsigned + " = ?")
case FieldMediumSigned:
placeholders = append(placeholders, FieldMediumSigned + " = ?")
case FieldMediumUnsigned:
placeholders = append(placeholders, FieldMediumUnsigned + " = ?")
case FieldIntSigned:
placeholders = append(placeholders, FieldIntSigned + " = ?")
case FieldIntUnsigned:
placeholders = append(placeholders, FieldIntUnsigned + " = ?")
case FieldBigSigned:
placeholders = append(placeholders, FieldBigSigned + " = ?")
case FieldBigUnsigned:
placeholders = append(placeholders, FieldBigUnsigned + " = ?")
case FieldFloatField:
placeholders = append(placeholders, FieldFloatField + " = ?")
case FieldDoubleField:
placeholders = append(placeholders, FieldDoubleField + " = ?")
case FieldRealField:
placeholders = append(placeholders, FieldRealField + " = ?")
case FieldDecimalField:
placeholders = append(placeholders, FieldDecimalField + " = ?")
case FieldDecField:
placeholders = append(placeholders, FieldDecField + " = ?")
case FieldNumericField:
placeholders = append(placeholders, FieldNumericField + " = ?")
case FieldFixedField:
placeholders = append(placeholders, FieldFixedField + " = ?")
case FieldBit1:
placeholders = append(placeholders, FieldBit1 + " = ?")
case FieldBit8:
placeholders = append(placeholders, FieldBit8 + " = ?")
case FieldBit64:
placeholders = append(placeholders, FieldBit64 + " = ?")
case FieldBoolField:
placeholders = append(placeholders, FieldBoolField + " = ?")
case FieldBooleanField:
placeholders = append(placeholders, FieldBooleanField + " = ?")
case FieldCharField:
placeholders = append(placeholders, FieldCharField + " = ?")
case FieldVarcharField:
placeholders = append(placeholders, FieldVarcharField + " = ?")
case FieldTextField:
placeholders = append(placeholders, FieldTextField + " = ?")
case FieldTinytextField:
placeholders = append(placeholders, FieldTinytextField + " = ?")
case FieldMediumtextField:
placeholders = append(placeholders, FieldMediumtextField + " = ?")
case FieldLongtextField:
placeholders = append(placeholders, FieldLongtextField + " = ?")
case FieldEnumField:
placeholders = append(placeholders, FieldEnumField + " = ?")
case FieldSetField:
placeholders = append(placeholders, FieldSetField + " = ?")
case FieldBinaryField:
placeholders = append(placeholders, FieldBinaryField + " = ?")
case FieldVarbinaryField:
placeholders = append(placeholders, FieldVarbinaryField + " = ?")
case FieldBlobField:
placeholders = append(placeholders, FieldBlobField + " = ?")
case FieldTinyblobField:
placeholders = append(placeholders, FieldTinyblobField + " = ?")
case FieldMediumblobField:
placeholders = append(placeholders, FieldMediumblobField + " = ?")
case FieldLongblobField:
placeholders = append(placeholders, FieldLongblobField + " = ?")
case FieldDateField:
placeholders = append(placeholders, FieldDateField + " = ?")
case FieldTimeField:
placeholders = append(placeholders, FieldTimeField + " = ?")
case FieldYearField:
placeholders = append(placeholders, FieldYearField + " = ?")
case FieldDatetimeField:
placeholders = append(placeholders, FieldDatetimeField + " = ?")
case FieldTimestampField:
placeholders = append(placeholders, FieldTimestampField + " = ?")
case FieldUuidField:
placeholders = append(placeholders, FieldUuidField + " = ?")
}
}

return placeholders
}

`
	if template != expected {
		t.Fatal("unexpected result:", template)
	}
}
